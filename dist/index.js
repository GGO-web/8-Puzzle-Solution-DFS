(()=>{"use strict";const e=[{x:0,y:-1,name:"⇐"},{x:-1,y:0,name:"⇑"},{x:0,y:1,name:"⇒"},{x:1,y:0,name:"⇓"}],t={currentState:null,moves:0,settled:0,dropped:0,depth:0,haveSolution:!1},n=(e,t,n=!0)=>{console.log(`Index of the state ${t}`);let o="";for(let t of e){const e=t.map((e=>e||" "));o+="-------------\n",o+=`| ${e[0]} | ${e[1]} | ${e[2]} |\n`}return o+="-------------\n",n&&console.log(o),o},o=e=>{let t={x:0,y:0,name:"empty"};e:for(let n=0;n<e[0].length;++n)for(let o=0;o<e.length;++o)if(null===e[n][o]){t.x=n,t.y=o;break e}return t},l=e=>e.x>=3||e.x<0||e.y>=3||e.y<0;class s{constructor(e,t,o,l,s){this.getState=()=>this.state,this.getMoves=()=>this.operator,this.getDepth=()=>this.depth||1,this.pathFromStart=()=>{let e=[],t=[],o=this;console.log(o.getDepth());do{e.push(o?.getState()),t.push(o?.getMoves()),o=o?.parent}while(o?.getDepth());e.reverse(),t.reverse();let l=1;for(const t of e)n(t,l),l++;return console.log(`Кількість переміщень: ${t.length}`),console.log(`Переміщення по порядку: ${t.join(", ")}\n`),t},this.state=e,this.parent=t,this.operator=o,this.depth=l,this.cost=s}}let r=t;const a=document.getElementById("game-depth"),d=function(t,n,c,i){for(;i.length;){let u=i.pop();if(u.getDepth()>=parseInt(a.value)||r.haveSolution)return n;if(r={...r,currentState:u,settled:c.size,depth:u.getDepth(),haveSolution:!1},p=u.getState(),h=t,p?.toString()===h?.toString())return r.haveSolution=!0,n;const g=o(u.getState());e.forEach((e=>{const o=u?.getState()?.map((e=>[...e])),a={x:g.x+e.x,y:g.y+e.y,name:e.name};l(a)||([o[g.x][g.y],o[a.x][a.y]]=[o[a.x][a.y],o[g.x][g.y]],r.moves++,c.get(o.toString())?r.dropped++:(i.push(new s(o,u,e.name,u.getDepth()+1,0)),c.set(o.toString(),!0),n.push({state:o,index:r.moves+1}),d(t,n,c,i)))}))}var p,h;return n};(()=>{let e=[];const o=document.querySelector(".next"),l=document.querySelector(".result"),c=document.querySelector(".find"),i=document.getElementById("result-content");let p=0;const h=document.getElementById("results"),u=()=>{const n=e=>{const t=[];for(let n of e.rows){const e=[];for(let t of n.cells){const n=parseInt(t.innerHTML);Number.isNaN(n)?e.push(null):e.push(n)}t.push(e)}return t},a=document.querySelector(".initial-state"),c=document.querySelector(".final-state"),i=n(a),u=n(c);p=0,r=t,h.innerHTML=null;const g=new Map;g.set(i.toString(),!0);const m=[new s(i,null,null,0,0)];e=d(u,[{state:i,index:1}],g,m),o.disabled=!1,l.disabled=!1};o.disabled=!0,l.disabled=!0,o?.addEventListener("click",(()=>{p>=e.length-1&&(o.disabled=!0);const t=document.createElement("table");t.className+="table table-primary table-hover table-bordered table-sm align-middle caption-top",t.style.width="200px",t.style.height="200px",t.style.textAlign="center",t.insertAdjacentHTML("afterbegin",`\n            <caption class="fw-bold text-primary">\n               Index of the state is ${e[p].index}\n            </caption>\n         `);const l=document.createElement("tbody");for(let t of e[p].state){const e=l.insertRow();for(let n of t){const t=e.insertCell();t.classList.add("align-middle"),t.innerHTML=n?String(n):" "}}t.appendChild(l),h?.appendChild(t),h.scrollTop=h.scrollHeight,n(e[p].state,e[p].index),p++})),l?.addEventListener("click",(()=>{i.innerHTML="",r.haveSolution?(console.log("Порядок переміщень для розв'язку гри в 8:"),r?.currentState?.pathFromStart(),console.log(`Кількість відвіданих станів: ${r.moves}`),console.log(`Кількість станів занесених у БД: ${r.settled}`),console.log(`Кількість відкинутих станів: ${r.dropped}`),console.log(`Глибина дерева пошуку на якій знайдено рішення: ${r.depth}`),i.insertAdjacentHTML("beforeend",`\n            <code>\n            <pre>Кількість відвіданих станів: ${r.moves}<br>Кількість станів занесених у БД: ${r.settled}<br>Кількість відкинутих станів: ${r.dropped}<br>Глибина дерева пошуку на якій знайдено рішення: ${r.depth}</pre>\n            </code>\n         `)):(console.log(`Кількість відвіданих станів: ${r.moves}`),console.log(`Кількість станів занесених у БД: ${r.settled}`),console.log(`Кількість відкинутих станів: ${r.dropped}`),console.log("Гра у 8 немає розв'язків"),i.insertAdjacentHTML("beforeend",`\n            <code>\n            <pre>Кількість відвіданих станів : ${r.moves}<br>Кількість станів занесених у БД : ${r.settled}<br>Кількість відкинутих станів : ${r.dropped}<br>Гра у 8 немає розв'язків</pre>\n            </code>\n         `))})),c?.addEventListener("click",u),a.addEventListener("change",u)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TyxRQUFRQyxJQUFJLDRCQUNad0QsRUFBY3lCLG1CQUFtQixZQUFhLHdFQUVUbkQsRUFBUXhDLDhDQUE4Q3dDLEVBQVF2Qyw0Q0FBNEN1QyxFQUFRdEMsNkVBc0Y3SSxJQUVsQitELEdBQVltQixpQkFBaUIsUUFBU2YsR0FDdEM1QixFQUFXMkMsaUJBQWlCLFNBQVVmLEVBQ3pDLEVBbkhELEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYWIxLy4vc3JjL2NvbnN0YW50cy50cyIsIndlYnBhY2s6Ly9sYWIxLy4vc3JjL2hlbHBlcnMudHMiLCJ3ZWJwYWNrOi8vbGFiMS8uL3NyYy9ub2RlLnRzIiwid2VicGFjazovL2xhYjEvLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGZpbmFsU3RhdGUgPSBbXHJcbiAgICBbMSwgMiwgM10sXHJcbiAgICBbNCwgNSwgNl0sXHJcbiAgICBbNywgOCwgbnVsbF0sXHJcbl07XHJcbmV4cG9ydCBjb25zdCBkaXJlY3Rpb25zID0gW1xyXG4gICAgeyB4OiAwLCB5OiAtMSwgbmFtZTogXCLih5BcIiB9LFxyXG4gICAgeyB4OiAtMSwgeTogMCwgbmFtZTogXCLih5FcIiB9LFxyXG4gICAgeyB4OiAwLCB5OiAxLCBuYW1lOiBcIuKHklwiIH0sXHJcbiAgICB7IHg6IDEsIHk6IDAsIG5hbWU6IFwi4oeTXCIgfSxcclxuXTtcclxuZXhwb3J0IGNvbnN0IE1BWF9ERVBUSF9TSVpFID0gMTMwMDtcclxuZXhwb3J0IGNvbnN0IENMRUFOX1JFU1VMVCA9IHtcclxuICAgIGN1cnJlbnRTdGF0ZTogbnVsbCxcclxuICAgIG1vdmVzOiAwLFxyXG4gICAgc2V0dGxlZDogMCxcclxuICAgIGRyb3BwZWQ6IDAsXHJcbiAgICBkZXB0aDogMCxcclxuICAgIGhhdmVTb2x1dGlvbjogZmFsc2UsXHJcbn07XHJcbiIsImV4cG9ydCBmdW5jdGlvbiogZ2V0RXhlY3V0aW9uVGltZSgpIHtcclxuICAgIGNvbnN0IHN0YXJ0VGltZSA9IG5ldyBEYXRlKCk7XHJcbiAgICB5aWVsZCAxO1xyXG4gICAgY29uc3QgZW5kVGltZSA9IG5ldyBEYXRlKCk7XHJcbiAgICBjb25zdCBkaWZmID0gbmV3IERhdGUoZW5kVGltZSAtIHN0YXJ0VGltZSk7XHJcbiAgICBjb25zdCBleGVjdXRpb24gPSBkaWZmLmdldFNlY29uZHMoKSArIDAuMDAxICogZGlmZi5nZXRNaWxsaXNlY29uZHMoKTtcclxuICAgIGNvbnNvbGUubG9nKGBFeGVjdXRpb24gdGltZTogJHtleGVjdXRpb259IHNlY29uZHNgKTtcclxufVxyXG5leHBvcnQgY29uc3QgZGlzcGxheUJvYXJkID0gKHN0YXRlLCBpbmRleCwgZGVidWcgPSB0cnVlKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhgSW5kZXggb2YgdGhlIHN0YXRlICR7aW5kZXh9YCk7XHJcbiAgICBsZXQgZGlzcGxheSA9IFwiXCI7XHJcbiAgICBmb3IgKGxldCByb3cgb2Ygc3RhdGUpIHtcclxuICAgICAgICBjb25zdCBjZWxscyA9IHJvdy5tYXAoKGl0ZW0pID0+ICghaXRlbSA/IFwiIFwiIDogaXRlbSkpO1xyXG4gICAgICAgIGRpc3BsYXkgKz0gXCItLS0tLS0tLS0tLS0tXFxuXCI7XHJcbiAgICAgICAgZGlzcGxheSArPSBgfCAke2NlbGxzWzBdfSB8ICR7Y2VsbHNbMV19IHwgJHtjZWxsc1syXX0gfFxcbmA7XHJcbiAgICB9XHJcbiAgICBkaXNwbGF5ICs9IFwiLS0tLS0tLS0tLS0tLVxcblwiO1xyXG4gICAgaWYgKGRlYnVnKVxyXG4gICAgICAgIGNvbnNvbGUubG9nKGRpc3BsYXkpO1xyXG4gICAgcmV0dXJuIGRpc3BsYXk7XHJcbn07XHJcbmV4cG9ydCBjb25zdCBnZXRFbXB5Q2VsbENvb3JkcyA9IChzdGF0ZSkgPT4ge1xyXG4gICAgbGV0IGNvb3JkaW5hdGVzID0geyB4OiAwLCB5OiAwLCBuYW1lOiBcImVtcHR5XCIgfTtcclxuICAgIG91dGVyOiBmb3IgKGxldCBpID0gMDsgaSA8IHN0YXRlWzBdLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzdGF0ZS5sZW5ndGg7ICsraikge1xyXG4gICAgICAgICAgICBpZiAoc3RhdGVbaV1bal0gPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVzLnggPSBpO1xyXG4gICAgICAgICAgICAgICAgY29vcmRpbmF0ZXMueSA9IGo7XHJcbiAgICAgICAgICAgICAgICBicmVhayBvdXRlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjb29yZGluYXRlcztcclxufTtcclxuZXhwb3J0IGNvbnN0IHN0YXRlc0FyZUVxdWFsID0gKHN0YXRlLCBzZWNvbmRTdGF0ZSkgPT4ge1xyXG4gICAgcmV0dXJuIHN0YXRlPy50b1N0cmluZygpID09PSBzZWNvbmRTdGF0ZT8udG9TdHJpbmcoKTtcclxufTtcclxuZXhwb3J0IGNvbnN0IGlzT3V0T2ZCb3JkZXIgPSAoY29vcmRzKSA9PiB7XHJcbiAgICBpZiAoY29vcmRzLnggPj0gMyB8fCBjb29yZHMueCA8IDApXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICBpZiAoY29vcmRzLnkgPj0gMyB8fCBjb29yZHMueSA8IDApXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn07XHJcbiIsImltcG9ydCB7IGRpc3BsYXlCb2FyZCB9IGZyb20gXCIuL2hlbHBlcnNcIjtcclxuZXhwb3J0IGNsYXNzIE5vZGUge1xyXG4gICAgY29uc3RydWN0b3Ioc3RhdGUsIHBhcmVudCwgb3BlcmF0b3IsIGRlcHRoLCBjb3N0KSB7XHJcbiAgICAgICAgdGhpcy5nZXRTdGF0ZSA9ICgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmdldE1vdmVzID0gKCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5vcGVyYXRvcjtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZ2V0RGVwdGggPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlcHRoIHx8IDE7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnBhdGhGcm9tU3RhcnQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBzdGF0ZUxpc3QgPSBbXTtcclxuICAgICAgICAgICAgbGV0IG1vdmVMaXN0ID0gW107XHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50Tm9kZSA9IHRoaXM7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGN1cnJlbnROb2RlLmdldERlcHRoKCkpO1xyXG4gICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZUxpc3QucHVzaChjdXJyZW50Tm9kZT8uZ2V0U3RhdGUoKSk7XHJcbiAgICAgICAgICAgICAgICBtb3ZlTGlzdC5wdXNoKGN1cnJlbnROb2RlPy5nZXRNb3ZlcygpKTtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGU/LnBhcmVudDtcclxuICAgICAgICAgICAgfSB3aGlsZSAoY3VycmVudE5vZGU/LmdldERlcHRoKCkpO1xyXG4gICAgICAgICAgICBzdGF0ZUxpc3QucmV2ZXJzZSgpO1xyXG4gICAgICAgICAgICBtb3ZlTGlzdC5yZXZlcnNlKCk7XHJcbiAgICAgICAgICAgIGxldCBpbmRleCA9IDE7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBzdGF0ZUxpc3QpIHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlCb2FyZChpdGVtLCBpbmRleCk7XHJcbiAgICAgICAgICAgICAgICBpbmRleCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGDQmtGW0LvRjNC60ZbRgdGC0Ywg0L/QtdGA0LXQvNGW0YnQtdC90Yw6ICR7bW92ZUxpc3QubGVuZ3RofWApO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhg0J/QtdGA0LXQvNGW0YnQtdC90L3RjyDQv9C+INC/0L7RgNGP0LTQutGDOiAke21vdmVMaXN0LmpvaW4oXCIsIFwiKX1cXG5gKTtcclxuICAgICAgICAgICAgcmV0dXJuIG1vdmVMaXN0O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xyXG4gICAgICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xyXG4gICAgICAgIHRoaXMub3BlcmF0b3IgPSBvcGVyYXRvcjtcclxuICAgICAgICB0aGlzLmRlcHRoID0gZGVwdGg7XHJcbiAgICAgICAgdGhpcy5jb3N0ID0gY29zdDtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDTEVBTl9SRVNVTFQsIGRpcmVjdGlvbnMgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcclxuaW1wb3J0IHsgZGlzcGxheUJvYXJkLCBnZXRFbXB5Q2VsbENvb3JkcywgaXNPdXRPZkJvcmRlciwgc3RhdGVzQXJlRXF1YWwsIH0gZnJvbSBcIi4vaGVscGVyc1wiO1xyXG5pbXBvcnQgeyBOb2RlIH0gZnJvbSBcIi4vbm9kZVwiO1xyXG5sZXQgcmVzdWx0cyA9IENMRUFOX1JFU1VMVDtcclxuY29uc3QgaW5wdXREZXB0aCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ2FtZS1kZXB0aFwiKTtcclxuY29uc3QgREZTID0gZnVuY3Rpb24gKGZpbmFsLCBzdGF0ZXMsIGRiLCBxdWV1ZSkge1xyXG4gICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCkge1xyXG4gICAgICAgIGxldCBjdXJyZW50U3RhdGUgPSBxdWV1ZS5wb3AoKTtcclxuICAgICAgICBpZiAoY3VycmVudFN0YXRlLmdldERlcHRoKCkgPj0gcGFyc2VJbnQoaW5wdXREZXB0aC52YWx1ZSkgfHxcclxuICAgICAgICAgICAgcmVzdWx0cy5oYXZlU29sdXRpb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlcztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVzdWx0cyA9IHtcclxuICAgICAgICAgICAgLi4ucmVzdWx0cyxcclxuICAgICAgICAgICAgY3VycmVudFN0YXRlOiBjdXJyZW50U3RhdGUsXHJcbiAgICAgICAgICAgIHNldHRsZWQ6IGRiLnNpemUsXHJcbiAgICAgICAgICAgIGRlcHRoOiBjdXJyZW50U3RhdGUuZ2V0RGVwdGgoKSxcclxuICAgICAgICAgICAgaGF2ZVNvbHV0aW9uOiBmYWxzZSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChzdGF0ZXNBcmVFcXVhbChjdXJyZW50U3RhdGUuZ2V0U3RhdGUoKSwgZmluYWwpKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdHMuaGF2ZVNvbHV0aW9uID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlcztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZW1wdHlDZWxsID0gZ2V0RW1weUNlbGxDb29yZHMoY3VycmVudFN0YXRlLmdldFN0YXRlKCkpO1xyXG4gICAgICAgIGRpcmVjdGlvbnMuZm9yRWFjaCgoZGlyZWN0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvcHlTdGF0ZSA9IGN1cnJlbnRTdGF0ZVxyXG4gICAgICAgICAgICAgICAgPy5nZXRTdGF0ZSgpXHJcbiAgICAgICAgICAgICAgICA/Lm1hcCgocm93KSA9PiBbLi4ucm93XSk7XHJcbiAgICAgICAgICAgIC8vIGNvb3JkcyBjZWxsIHRvIHN3aXRjaFxyXG4gICAgICAgICAgICBjb25zdCBjb29yZHMgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBlbXB0eUNlbGwueCArIGRpcmVjdGlvbi54LFxyXG4gICAgICAgICAgICAgICAgeTogZW1wdHlDZWxsLnkgKyBkaXJlY3Rpb24ueSxcclxuICAgICAgICAgICAgICAgIG5hbWU6IGRpcmVjdGlvbi5uYW1lLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyBpZiBjb29yZHMgb2Ygc3dhcHBlZCBjZWxsIGlzIG5vdCBvdXQgdGhlIGJvcmRlciBvZiB0aGUgZmllbGRcclxuICAgICAgICAgICAgaWYgKCFpc091dE9mQm9yZGVyKGNvb3JkcykpIHtcclxuICAgICAgICAgICAgICAgIC8vIG1vdmUgZW1wdHkgY2VsbCBpbnRvIGN1cnJlbnQgZGlyZWN0aW9uXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgY29weVN0YXRlW2VtcHR5Q2VsbC54XVtlbXB0eUNlbGwueV0sXHJcbiAgICAgICAgICAgICAgICAgICAgY29weVN0YXRlW2Nvb3Jkcy54XVtjb29yZHMueV0sXHJcbiAgICAgICAgICAgICAgICBdID0gW1xyXG4gICAgICAgICAgICAgICAgICAgIGNvcHlTdGF0ZVtjb29yZHMueF1bY29vcmRzLnldLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvcHlTdGF0ZVtlbXB0eUNlbGwueF1bZW1wdHlDZWxsLnldLFxyXG4gICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgIHJlc3VsdHMubW92ZXMrKztcclxuICAgICAgICAgICAgICAgIC8vIGlmIHN3YXBwZWQgc3RhdGUgaXMgbm90IHByZXNlbnQgaW4gZGF0YWJhc2VcclxuICAgICAgICAgICAgICAgIGlmICghZGIuZ2V0KGNvcHlTdGF0ZS50b1N0cmluZygpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2gobmV3IE5vZGUoY29weVN0YXRlLCBjdXJyZW50U3RhdGUsIGRpcmVjdGlvbi5uYW1lLCBjdXJyZW50U3RhdGUuZ2V0RGVwdGgoKSArIDEsIDApKTtcclxuICAgICAgICAgICAgICAgICAgICBkYi5zZXQoY29weVN0YXRlLnRvU3RyaW5nKCksIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlcy5wdXNoKHsgc3RhdGU6IGNvcHlTdGF0ZSwgaW5kZXg6IHJlc3VsdHMubW92ZXMgKyAxIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIERGUyhmaW5hbCwgc3RhdGVzLCBkYiwgcXVldWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5kcm9wcGVkKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBzdGF0ZXM7XHJcbn07XHJcbigoKSA9PiB7XHJcbiAgICBsZXQgYWxsU3RhdGVzID0gW107XHJcbiAgICBjb25zdCBuZXh0U3RhdGVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm5leHRcIik7XHJcbiAgICBjb25zdCByZXN1bHRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnJlc3VsdFwiKTtcclxuICAgIGNvbnN0IGZpbmRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmZpbmRcIik7XHJcbiAgICBjb25zdCByZXN1bHRDb250ZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXN1bHQtY29udGVudFwiKTtcclxuICAgIGxldCBpbmRleE9mTmV4dFN0YXRlID0gMDtcclxuICAgIGNvbnN0IHJlc3VsdHNXcmFwcGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXN1bHRzXCIpO1xyXG4gICAgY29uc3QgdW5sb2NrQnV0dG9ucyA9ICgpID0+IHtcclxuICAgICAgICBuZXh0U3RhdGVCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICByZXN1bHRCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIH07XHJcbiAgICBjb25zdCBkaXNhYmxlQnV0dG9ucyA9ICgpID0+IHtcclxuICAgICAgICBuZXh0U3RhdGVCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgIHJlc3VsdEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcHJpbnRSZXN1bHRzID0gKCkgPT4ge1xyXG4gICAgICAgIHJlc3VsdENvbnRlbnQuaW5uZXJIVE1MID0gXCJcIjtcclxuICAgICAgICBpZiAoIXJlc3VsdHMuaGF2ZVNvbHV0aW9uKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGDQmtGW0LvRjNC60ZbRgdGC0Ywg0LLRltC00LLRltC00LDQvdC40YUg0YHRgtCw0L3RltCyOiAke3Jlc3VsdHMubW92ZXN9YCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGDQmtGW0LvRjNC60ZbRgdGC0Ywg0YHRgtCw0L3RltCyINC30LDQvdC10YHQtdC90LjRhSDRgyDQkdCUOiAke3Jlc3VsdHMuc2V0dGxlZH1gKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYNCa0ZbQu9GM0LrRltGB0YLRjCDQstGW0LTQutC40L3Rg9GC0LjRhSDRgdGC0LDQvdGW0LI6ICR7cmVzdWx0cy5kcm9wcGVkfWApO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcItCT0YDQsCDRgyA4INC90LXQvNCw0ZQg0YDQvtC30LIn0Y/Qt9C60ZbQslwiKTtcclxuICAgICAgICAgICAgcmVzdWx0Q29udGVudC5pbnNlcnRBZGphY2VudEhUTUwoXCJiZWZvcmVlbmRcIiwgYFxuICAgICAgICAgICAgPGNvZGU+XG4gICAgICAgICAgICA8cHJlPtCa0ZbQu9GM0LrRltGB0YLRjCDQstGW0LTQstGW0LTQsNC90LjRhSDRgdGC0LDQvdGW0LIgOiAke3Jlc3VsdHMubW92ZXN9PGJyPtCa0ZbQu9GM0LrRltGB0YLRjCDRgdGC0LDQvdGW0LIg0LfQsNC90LXRgdC10L3QuNGFINGDINCR0JQgOiAke3Jlc3VsdHMuc2V0dGxlZH08YnI+0JrRltC70YzQutGW0YHRgtGMINCy0ZbQtNC60LjQvdGD0YLQuNGFINGB0YLQsNC90ZbQsiA6ICR7cmVzdWx0cy5kcm9wcGVkfTxicj7Qk9GA0LAg0YMgOCDQvdC10LzQsNGUINGA0L7Qt9CyJ9GP0LfQutGW0LI8L3ByZT5cbiAgICAgICAgICAgIDwvY29kZT5cbiAgICAgICAgIGApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCLQn9C+0YDRj9C00L7QuiDQv9C10YDQtdC80ZbRidC10L3RjCDQtNC70Y8g0YDQvtC30LIn0Y/Qt9C60YMg0LPRgNC4INCyIDg6XCIpO1xyXG4gICAgICAgICAgICByZXN1bHRzPy5jdXJyZW50U3RhdGU/LnBhdGhGcm9tU3RhcnQoKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYNCa0ZbQu9GM0LrRltGB0YLRjCDQstGW0LTQstGW0LTQsNC90LjRhSDRgdGC0LDQvdGW0LI6ICR7cmVzdWx0cy5tb3Zlc31gKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYNCa0ZbQu9GM0LrRltGB0YLRjCDRgdGC0LDQvdGW0LIg0LfQsNC90LXRgdC10L3QuNGFINGDINCR0JQ6ICR7cmVzdWx0cy5zZXR0bGVkfWApO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhg0JrRltC70YzQutGW0YHRgtGMINCy0ZbQtNC60LjQvdGD0YLQuNGFINGB0YLQsNC90ZbQsjogJHtyZXN1bHRzLmRyb3BwZWR9YCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGDQk9C70LjQsdC40L3QsCDQtNC10YDQtdCy0LAg0L/QvtGI0YPQutGDINC90LAg0Y/QutGW0Lkg0LfQvdCw0LnQtNC10L3QviDRgNGW0YjQtdC90L3RjzogJHtyZXN1bHRzLmRlcHRofWApO1xyXG4gICAgICAgICAgICByZXN1bHRDb250ZW50Lmluc2VydEFkamFjZW50SFRNTChcImJlZm9yZWVuZFwiLCBgXG4gICAgICAgICAgICA8Y29kZT5cbiAgICAgICAgICAgIDxwcmU+0JrRltC70YzQutGW0YHRgtGMINCy0ZbQtNCy0ZbQtNCw0L3QuNGFINGB0YLQsNC90ZbQsjogJHtyZXN1bHRzLm1vdmVzfTxicj7QmtGW0LvRjNC60ZbRgdGC0Ywg0YHRgtCw0L3RltCyINC30LDQvdC10YHQtdC90LjRhSDRgyDQkdCUOiAke3Jlc3VsdHMuc2V0dGxlZH08YnI+0JrRltC70YzQutGW0YHRgtGMINCy0ZbQtNC60LjQvdGD0YLQuNGFINGB0YLQsNC90ZbQsjogJHtyZXN1bHRzLmRyb3BwZWR9PGJyPtCT0LvQuNCx0LjQvdCwINC00LXRgNC10LLQsCDQv9C+0YjRg9C60YMg0L3QsCDRj9C60ZbQuSDQt9C90LDQudC00LXQvdC+INGA0ZbRiNC10L3QvdGPOiAke3Jlc3VsdHMuZGVwdGh9PC9wcmU+XG4gICAgICAgICAgICA8L2NvZGU+XG4gICAgICAgICBgKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgZmluZFJlc3VsdHMgPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZ2V0VGFibGVTdGF0ZSA9ICh0YWJsZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBzdGF0ZSA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCByb3cgb2YgdGFibGUucm93cykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdGVSb3cgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGNlbGwgb2Ygcm93LmNlbGxzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VsbERhdGEgPSBwYXJzZUludChjZWxsLmlubmVySFRNTCk7XHJcbiAgICAgICAgICAgICAgICAgICAgTnVtYmVyLmlzTmFOKGNlbGxEYXRhKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHN0YXRlUm93LnB1c2gobnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBzdGF0ZVJvdy5wdXNoKGNlbGxEYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHN0YXRlLnB1c2goc3RhdGVSb3cpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGluaXRpYWxTdGF0ZVRhYmxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5pbml0aWFsLXN0YXRlXCIpO1xyXG4gICAgICAgIGNvbnN0IGZpbmFsU3RhdGVUYWJsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZmluYWwtc3RhdGVcIik7XHJcbiAgICAgICAgY29uc3QgaW5pdGlhbCA9IGdldFRhYmxlU3RhdGUoaW5pdGlhbFN0YXRlVGFibGUpO1xyXG4gICAgICAgIGNvbnN0IGZpbmFsID0gZ2V0VGFibGVTdGF0ZShmaW5hbFN0YXRlVGFibGUpO1xyXG4gICAgICAgIC8vIHJlc2V0IHN0ZXAgYnkgc3RlcCByZXN1bHRzIG91dHB1dFxyXG4gICAgICAgIGluZGV4T2ZOZXh0U3RhdGUgPSAwO1xyXG4gICAgICAgIHJlc3VsdHMgPSBDTEVBTl9SRVNVTFQ7XHJcbiAgICAgICAgcmVzdWx0c1dyYXBwZXIuaW5uZXJIVE1MID0gbnVsbDtcclxuICAgICAgICBjb25zdCBkYiA9IG5ldyBNYXAoKTtcclxuICAgICAgICBkYi5zZXQoaW5pdGlhbC50b1N0cmluZygpLCB0cnVlKTtcclxuICAgICAgICBjb25zdCBxdWV1ZSA9IFtuZXcgTm9kZShpbml0aWFsLCBudWxsLCBudWxsLCAwLCAwKV07XHJcbiAgICAgICAgYWxsU3RhdGVzID0gREZTKGZpbmFsLCBbeyBzdGF0ZTogaW5pdGlhbCwgaW5kZXg6IDEgfV0sIGRiLCBxdWV1ZSk7XHJcbiAgICAgICAgdW5sb2NrQnV0dG9ucygpO1xyXG4gICAgfTtcclxuICAgIGRpc2FibGVCdXR0b25zKCk7XHJcbiAgICBuZXh0U3RhdGVCdXR0b24/LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgaWYgKGluZGV4T2ZOZXh0U3RhdGUgPj0gYWxsU3RhdGVzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgbmV4dFN0YXRlQnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQWRkIG5leHQgbmV3IHN0YXRlIHRhYmxlIHRvIHRoZSB2aWV3XHJcbiAgICAgICAgY29uc3QgdGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGFibGVcIik7XHJcbiAgICAgICAgdGFibGUuY2xhc3NOYW1lICs9XHJcbiAgICAgICAgICAgIFwidGFibGUgdGFibGUtcHJpbWFyeSB0YWJsZS1ob3ZlciB0YWJsZS1ib3JkZXJlZCB0YWJsZS1zbSBhbGlnbi1taWRkbGUgY2FwdGlvbi10b3BcIjtcclxuICAgICAgICB0YWJsZS5zdHlsZS53aWR0aCA9IFwiMjAwcHhcIjtcclxuICAgICAgICB0YWJsZS5zdHlsZS5oZWlnaHQgPSBcIjIwMHB4XCI7XHJcbiAgICAgICAgdGFibGUuc3R5bGUudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcclxuICAgICAgICB0YWJsZS5pbnNlcnRBZGphY2VudEhUTUwoXCJhZnRlcmJlZ2luXCIsIGBcbiAgICAgICAgICAgIDxjYXB0aW9uIGNsYXNzPVwiZnctYm9sZCB0ZXh0LXByaW1hcnlcIj5cbiAgICAgICAgICAgICAgIEluZGV4IG9mIHRoZSBzdGF0ZSBpcyAke2FsbFN0YXRlc1tpbmRleE9mTmV4dFN0YXRlXS5pbmRleH1cbiAgICAgICAgICAgIDwvY2FwdGlvbj5cbiAgICAgICAgIGApO1xyXG4gICAgICAgIGNvbnN0IHRib2R5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRib2R5XCIpO1xyXG4gICAgICAgIGZvciAobGV0IHJvdyBvZiBhbGxTdGF0ZXNbaW5kZXhPZk5leHRTdGF0ZV0uc3RhdGUpIHtcclxuICAgICAgICAgICAgY29uc3QgdGFibGVSb3cgPSB0Ym9keS5pbnNlcnRSb3coKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgY29sIG9mIHJvdykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGQgPSB0YWJsZVJvdy5pbnNlcnRDZWxsKCk7XHJcbiAgICAgICAgICAgICAgICB0ZC5jbGFzc0xpc3QuYWRkKFwiYWxpZ24tbWlkZGxlXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZC5pbm5lckhUTUwgPSBcIiBcIjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRkLmlubmVySFRNTCA9IFN0cmluZyhjb2wpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRhYmxlLmFwcGVuZENoaWxkKHRib2R5KTtcclxuICAgICAgICByZXN1bHRzV3JhcHBlcj8uYXBwZW5kQ2hpbGQodGFibGUpO1xyXG4gICAgICAgIHJlc3VsdHNXcmFwcGVyLnNjcm9sbFRvcCA9IHJlc3VsdHNXcmFwcGVyLnNjcm9sbEhlaWdodDtcclxuICAgICAgICAvLyBwcmludCByZXN1bHRzIHRvIHRoZSBjb25zb2xlXHJcbiAgICAgICAgZGlzcGxheUJvYXJkKGFsbFN0YXRlc1tpbmRleE9mTmV4dFN0YXRlXS5zdGF0ZSwgYWxsU3RhdGVzW2luZGV4T2ZOZXh0U3RhdGVdLmluZGV4KTtcclxuICAgICAgICBpbmRleE9mTmV4dFN0YXRlKys7XHJcbiAgICB9KTtcclxuICAgIHJlc3VsdEJ1dHRvbj8uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICBwcmludFJlc3VsdHMoKTtcclxuICAgIH0pO1xyXG4gICAgZmluZEJ1dHRvbj8uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZpbmRSZXN1bHRzKTtcclxuICAgIGlucHV0RGVwdGguYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmaW5kUmVzdWx0cyk7XHJcbn0pKCk7XHJcbiJdLCJuYW1lcyI6WyJkaXJlY3Rpb25zIiwieCIsInkiLCJuYW1lIiwiQ0xFQU5fUkVTVUxUIiwiY3VycmVudFN0YXRlIiwibW92ZXMiLCJzZXR0bGVkIiwiZHJvcHBlZCIsImRlcHRoIiwiaGF2ZVNvbHV0aW9uIiwiZGlzcGxheUJvYXJkIiwic3RhdGUiLCJpbmRleCIsImRlYnVnIiwiY29uc29sZSIsImxvZyIsImRpc3BsYXkiLCJyb3ciLCJjZWxscyIsIm1hcCIsIml0ZW0iLCJnZXRFbXB5Q2VsbENvb3JkcyIsImNvb3JkaW5hdGVzIiwib3V0ZXIiLCJpIiwibGVuZ3RoIiwiaiIsImlzT3V0T2ZCb3JkZXIiLCJjb29yZHMiLCJOb2RlIiwiY29uc3RydWN0b3IiLCJwYXJlbnQiLCJvcGVyYXRvciIsImNvc3QiLCJ0aGlzIiwiZ2V0U3RhdGUiLCJnZXRNb3ZlcyIsImdldERlcHRoIiwicGF0aEZyb21TdGFydCIsInN0YXRlTGlzdCIsIm1vdmVMaXN0IiwiY3VycmVudE5vZGUiLCJwdXNoIiwicmV2ZXJzZSIsImpvaW4iLCJyZXN1bHRzIiwiaW5wdXREZXB0aCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJERlMiLCJmaW5hbCIsInN0YXRlcyIsImRiIiwicXVldWUiLCJwb3AiLCJwYXJzZUludCIsInZhbHVlIiwic2l6ZSIsInNlY29uZFN0YXRlIiwidG9TdHJpbmciLCJlbXB0eUNlbGwiLCJmb3JFYWNoIiwiZGlyZWN0aW9uIiwiY29weVN0YXRlIiwiZ2V0Iiwic2V0IiwiYWxsU3RhdGVzIiwibmV4dFN0YXRlQnV0dG9uIiwicXVlcnlTZWxlY3RvciIsInJlc3VsdEJ1dHRvbiIsImZpbmRCdXR0b24iLCJyZXN1bHRDb250ZW50IiwiaW5kZXhPZk5leHRTdGF0ZSIsInJlc3VsdHNXcmFwcGVyIiwiZmluZFJlc3VsdHMiLCJnZXRUYWJsZVN0YXRlIiwidGFibGUiLCJyb3dzIiwic3RhdGVSb3ciLCJjZWxsIiwiY2VsbERhdGEiLCJpbm5lckhUTUwiLCJOdW1iZXIiLCJpc05hTiIsImluaXRpYWxTdGF0ZVRhYmxlIiwiZmluYWxTdGF0ZVRhYmxlIiwiaW5pdGlhbCIsIk1hcCIsImRpc2FibGVkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJzdHlsZSIsIndpZHRoIiwiaGVpZ2h0IiwidGV4dEFsaWduIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwidGJvZHkiLCJ0YWJsZVJvdyIsImluc2VydFJvdyIsImNvbCIsInRkIiwiaW5zZXJ0Q2VsbCIsImNsYXNzTGlzdCIsImFkZCIsIlN0cmluZyIsImFwcGVuZENoaWxkIiwic2Nyb2xsVG9wIiwic2Nyb2xsSGVpZ2h0Il0sInNvdXJjZVJvb3QiOiIifQ==