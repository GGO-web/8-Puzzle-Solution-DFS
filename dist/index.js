(()=>{"use strict";const e=[{x:0,y:-1,name:"⇐"},{x:-1,y:0,name:"⇑"},{x:0,y:1,name:"⇒"},{x:1,y:0,name:"⇓"}],t={currentState:null,moves:0,settled:0,dropped:0,depth:0,haveSolution:!1},n=(e,t,n=!0)=>{console.log(`Index of the state ${t}`);let o="";for(let t of e){const e=t.map((e=>e||" "));o+="-------------\n",o+=`| ${e[0]} | ${e[1]} | ${e[2]} |\n`}return o+="-------------\n",n&&console.log(o),o},o=e=>{let t={x:0,y:0,name:"empty"};e:for(let n=0;n<e[0].length;++n)for(let o=0;o<e.length;++o)if(null===e[n][o]){t.x=n,t.y=o;break e}return t},r=e=>e.x>=3||e.x<0||e.y>=3||e.y<0;class s{constructor(e,t,o,r,s){this.getState=()=>this.state,this.getMoves=()=>this.operator,this.getDepth=()=>this.depth||1,this.pathFromStart=()=>{let e=[],t=[],o=this;console.log(o.getDepth());do{e.push(o?.getState()),t.push(o?.getMoves()),o=o?.parent}while(o?.getDepth());e.reverse(),t.reverse();let r=1;for(const t of e)n(t,r),r++;return console.log(`Кількість переміщень: ${t.length}`),console.log(`Переміщення по порядку: ${t.join(", ")}\n`),t},this.state=e,this.parent=t,this.operator=o,this.depth=r,this.cost=s}}let l=t;const d=document.getElementById("game-depth"),c=function(e,t,n,a,i){for(;a.length;){let h=a.pop();if(h.getDepth()>=parseInt(d.value)||l.haveSolution)return t;if(l={...l,currentState:h,settled:n.size,depth:h.getDepth(),haveSolution:!1},p=h.getState(),u=e,p?.toString()===u?.toString())return l.haveSolution=!0,t;const g=o(h.getState());i.forEach((o=>{const d=h?.getState()?.map((e=>[...e])),p={x:g.x+o.x,y:g.y+o.y,name:o.name};r(p)||([d[g.x][g.y],d[p.x][p.y]]=[d[p.x][p.y],d[g.x][g.y]],l.moves++,n.get(d.toString())?l.dropped++:(a.push(new s(d,h,o.name,h.getDepth()+1,0)),n.set(d.toString(),!0),t.push({state:d,index:l.moves+1}),c(e,t,n,a,i)))}))}var p,u;return t};(()=>{let o=[];const r=document.querySelector(".next"),a=document.querySelector(".result"),i=document.querySelector(".find"),p=document.getElementById("result-content");let u=0;const h=document.getElementById("results"),g=()=>{const n=e=>{const t=[];for(let n of e.rows){const e=[];for(let t of n.cells){const n=parseInt(t.innerHTML);Number.isNaN(n)?e.push(null):e.push(n)}t.push(e)}return t},d=document.querySelector(".initial-state"),i=document.querySelector(".final-state"),p=n(d),g=n(i);u=0,l=t,h.innerHTML=null;const m=new Map;m.set(p.toString(),!0);const y=[new s(p,null,null,0,0)],x=[parseInt(document.querySelector(".directions-left")?.textContent),parseInt(document.querySelector(".directions-top")?.textContent),parseInt(document.querySelector(".directions-right")?.textContent),parseInt(document.querySelector(".directions-bottom")?.textContent)],S=e.map(((e,t)=>({...e,orderIndex:x[t]})));S.sort(((e,t)=>e.orderIndex-t.orderIndex)),o=c(g,[{state:p,index:1}],m,y,S),r.disabled=!1,a.disabled=!1};r.disabled=!0,a.disabled=!0,r?.addEventListener("click",(()=>{u>=o.length-1&&(r.disabled=!0);const e=document.createElement("table");e.className+="table table-primary table-hover table-bordered table-sm align-middle caption-top",e.style.width="200px",e.style.height="200px",e.style.textAlign="center",e.insertAdjacentHTML("afterbegin",`\n            <caption class="fw-bold text-primary">\n               Index of the state is ${o[u].index}\n            </caption>\n         `);const t=document.createElement("tbody");for(let e of o[u].state){const n=t.insertRow();for(let t of e){const e=n.insertCell();e.classList.add("align-middle"),e.innerHTML=t?String(t):" "}}e.appendChild(t),h?.appendChild(e),h.scrollTop=h.scrollHeight,n(o[u].state,o[u].index),u++})),a?.addEventListener("click",(()=>{p.innerHTML="",l.haveSolution?(console.log("Порядок переміщень для розв'язку гри в 8:"),l?.currentState?.pathFromStart(),console.log(`Кількість відвіданих станів: ${l.moves}`),console.log(`Кількість станів занесених у БД: ${l.settled}`),console.log(`Кількість відкинутих станів: ${l.dropped}`),console.log(`Глибина дерева пошуку на якій знайдено рішення: ${l.depth}`),p.insertAdjacentHTML("beforeend",`\n            <code>\n            <pre>Кількість відвіданих станів: ${l.moves}<br>Кількість станів занесених у БД: ${l.settled}<br>Кількість відкинутих станів: ${l.dropped}<br>Глибина дерева пошуку на якій знайдено рішення: ${l.depth}</pre>\n            </code>\n         `)):(console.log(`Кількість відвіданих станів: ${l.moves}`),console.log(`Кількість станів занесених у БД: ${l.settled}`),console.log(`Кількість відкинутих станів: ${l.dropped}`),console.log("Гра у 8 немає розв'язків"),p.insertAdjacentHTML("beforeend",`\n            <code>\n            <pre>Кількість відвіданих станів : ${l.moves}<br>Кількість станів занесених у БД : ${l.settled}<br>Кількість відкинутих станів : ${l.dropped}<br>Гра у 8 немає розв'язків</pre>\n            </code>\n         `))})),i?.addEventListener("click",g),d.addEventListener("change",g)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,