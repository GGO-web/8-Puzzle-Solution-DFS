(()=>{"use strict";const e=[{x:0,y:-1,name:"⇐"},{x:-1,y:0,name:"⇑"},{x:0,y:1,name:"⇒"},{x:1,y:0,name:"⇓"}],t={currentState:null,moves:0,settled:0,dropped:0,depth:0,haveSolution:!1},n=(e,t,n=!0)=>{console.log(`Index of the state ${t}`);let o="";for(let t of e){const e=t.map((e=>e||" "));o+="-------------\n",o+=`| ${e[0]} | ${e[1]} | ${e[2]} |\n`}return o+="-------------\n",n&&console.log(o),o},o=e=>{let t={x:0,y:0,name:"empty"};e:for(let n=0;n<e[0].length;++n)for(let o=0;o<e.length;++o)if(null===e[n][o]){t.x=n,t.y=o;break e}return t},s=e=>e.x>=3||e.x<0||e.y>=3||e.y<0;class l{constructor(e,t,o,s,l){this.getState=()=>this.state,this.getMoves=()=>this.operator,this.getDepth=()=>this.depth||1,this.pathFromStart=()=>{let e=[],t=[],o=this;do{e.push(o?.getState()),t.push(o?.getMoves()),o=o?.parent,o&&!o.parent&&e.push(o?.getState())}while(0!==o?.getDepth());e.reverse(),t.reverse();let s=1;for(const t of e)n(t,s),s++;return console.log(`Кількість переміщень: ${t.length}`),console.log(`Переміщення по порядку: ${t.join(", ")}\n`),t},this.state=e,this.parent=t,this.operator=o,this.depth=s,this.cost=l}}let r=t;const a=function(t,n,d,c){for(;c.length;){let h=c.pop();if(h.getDepth()>=1300||r.haveSolution)return n;if(r={...r,currentState:h,settled:d.size,depth:h.getDepth(),haveSolution:!1},i=h.getState(),p=t,i?.toString()===p?.toString())return r.haveSolution=!0,n;const u=o(h.getState());e.forEach((e=>{const o=h?.getState()?.map((e=>[...e])),i={x:u.x+e.x,y:u.y+e.y,name:e.name};s(i)||([o[u.x][u.y],o[i.x][i.y]]=[o[i.x][i.y],o[u.x][u.y]],r.moves++,d.get(o.toString())?r.dropped++:(c.push(new l(o,h,e.name,h.getDepth()+1,0)),d.set(o.toString(),!0),n.push({state:o,index:r.moves+1}),a(t,n,d,c)))}))}var i,p;return n};(()=>{let e=[];const o=document.querySelector(".next"),s=document.querySelector(".result"),d=document.querySelector(".find"),c=document.getElementById("result-content");let i=0;const p=document.getElementById("results");o.disabled=!0,s.disabled=!0,o?.addEventListener("click",(()=>{i>=e.length-1&&(o.disabled=!0);const t=document.createElement("table");t.className+="table table-primary table-hover table-bordered table-sm align-middle caption-top",t.style.width="200px",t.style.height="200px",t.style.textAlign="center",t.insertAdjacentHTML("afterbegin",`\n            <caption class="fw-bold text-primary">\n               Index of the state is ${e[i].index}\n            </caption>\n         `);const s=document.createElement("tbody");for(let t of e[i].state){const e=s.insertRow();for(let n of t){const t=e.insertCell();t.classList.add("align-middle"),t.innerHTML=n?String(n):" "}}t.appendChild(s),p?.appendChild(t),p.scrollTop=p.scrollHeight,n(e[i].state,e[i].index),i++})),s?.addEventListener("click",(()=>{c.innerHTML="",r.haveSolution?(console.log("Порядок переміщень для розв'язку гри в 8:"),console.log(`Кількість відвіданих станів: ${r.moves}`),console.log(`Кількість станів занесених у БД: ${r.settled}`),console.log(`Кількість відкинутих станів: ${r.dropped}`),console.log(`Глибина дерева пошуку на якій знайдено рішення: ${r.depth}`),c.insertAdjacentHTML("beforeend",`\n            <code>\n            <pre>Кількість відвіданих станів: ${r.moves}<br>Кількість станів занесених у БД: ${r.settled}<br>Кількість відкинутих станів: ${r.dropped}<br>Глибина дерева пошуку на якій знайдено рішення: ${r.depth}</pre>\n            </code>\n         `)):(console.log(`Кількість відвіданих станів: ${r.moves}`),console.log(`Кількість станів занесених у БД: ${r.settled}`),console.log(`Кількість відкинутих станів: ${r.dropped}`),console.log("Гра у 8 немає розв'язків"),c.insertAdjacentHTML("beforeend",`\n            <code>\n            <pre>Кількість відвіданих станів : ${r.moves}<br>Кількість станів занесених у БД : ${r.settled}<br>Кількість відкинутих станів : ${r.dropped}<br>Гра у 8 немає розв'язків</pre>\n            </code>\n         `))})),d?.addEventListener("click",(()=>{const n=e=>{const t=[];for(let n of e.rows){const e=[];for(let t of n.cells){const n=parseInt(t.innerHTML);Number.isNaN(n)?e.push(null):e.push(n)}t.push(e)}return t},d=document.querySelector(".initial-state"),c=document.querySelector(".final-state"),h=n(d),u=n(c);i=0,r=t,p.innerHTML=null;const g=new Map;g.set(h.toString(),!0);const m=[new l(h,null,null,0,0)];e=a(u,[{state:h,index:1}],g,m),o.disabled=!1,s.disabled=!1}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,